# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  treatments(
    where: TreatmentWhereInput! = {}
    orderBy: [TreatmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Treatment!]
  treatmentsCount(where: TreatmentWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  treatments: TreatmentManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input TreatmentManyRelationFilter {
  every: TreatmentWhereInput
  some: TreatmentWhereInput
  none: TreatmentWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  treatments: TreatmentRelateToManyForUpdateInput
}

input TreatmentRelateToManyForUpdateInput {
  disconnect: [TreatmentWhereUniqueInput!]
  set: [TreatmentWhereUniqueInput!]
  create: [TreatmentCreateInput!]
  connect: [TreatmentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  treatments: TreatmentRelateToManyForCreateInput
}

input TreatmentRelateToManyForCreateInput {
  create: [TreatmentCreateInput!]
  connect: [TreatmentWhereUniqueInput!]
}

type Treatment {
  id: ID!
  name: String
  price: Int
  category: String
  subcategory: String
  shortDescription: String
  fullDescription: String
  gender: String
  status: String
  promoted: String
  user: User
  photo: Image
}

input TreatmentWhereUniqueInput {
  id: ID
}

input TreatmentWhereInput {
  AND: [TreatmentWhereInput!]
  OR: [TreatmentWhereInput!]
  NOT: [TreatmentWhereInput!]
  id: IDFilter
  name: StringFilter
  price: IntNullableFilter
  category: StringNullableFilter
  subcategory: StringFilter
  shortDescription: StringFilter
  fullDescription: StringFilter
  gender: StringNullableFilter
  status: StringNullableFilter
  promoted: StringNullableFilter
  user: UserWhereInput
  photo: ImageWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input TreatmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
  category: OrderDirection
  subcategory: OrderDirection
  shortDescription: OrderDirection
  fullDescription: OrderDirection
  gender: OrderDirection
  status: OrderDirection
  promoted: OrderDirection
}

input TreatmentUpdateInput {
  name: String
  price: Int
  category: String
  subcategory: String
  shortDescription: String
  fullDescription: String
  gender: String
  status: String
  promoted: String
  user: UserRelateToOneForUpdateInput
  photo: ImageRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input TreatmentUpdateArgs {
  where: TreatmentWhereUniqueInput!
  data: TreatmentUpdateInput!
}

input TreatmentCreateInput {
  name: String
  price: Int
  category: String
  subcategory: String
  shortDescription: String
  fullDescription: String
  gender: String
  status: String
  promoted: String
  user: UserRelateToOneForCreateInput
  photo: ImageRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

type Image {
  id: ID!
  image: ImageFieldOutput
  altText: String
  treatment: Treatment
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  treatment: TreatmentWhereInput
}

input ImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  image: ImageFieldInput
  altText: String
  treatment: TreatmentRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TreatmentRelateToOneForUpdateInput {
  create: TreatmentCreateInput
  connect: TreatmentWhereUniqueInput
  disconnect: Boolean
}

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  image: ImageFieldInput
  altText: String
  treatment: TreatmentRelateToOneForCreateInput
}

input TreatmentRelateToOneForCreateInput {
  create: TreatmentCreateInput
  connect: TreatmentWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTreatment(data: TreatmentCreateInput!): Treatment
  createTreatments(data: [TreatmentCreateInput!]!): [Treatment]
  updateTreatment(
    where: TreatmentWhereUniqueInput!
    data: TreatmentUpdateInput!
  ): Treatment
  updateTreatments(data: [TreatmentUpdateArgs!]!): [Treatment]
  deleteTreatment(where: TreatmentWhereUniqueInput!): Treatment
  deleteTreatments(where: [TreatmentWhereUniqueInput!]!): [Treatment]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  treatments(
    where: TreatmentWhereInput! = {}
    orderBy: [TreatmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Treatment!]
  treatment(where: TreatmentWhereUniqueInput!): Treatment
  treatmentsCount(where: TreatmentWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
